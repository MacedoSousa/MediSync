// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  DOCTOR
  PATIENT
  PHARMACY_ADMIN
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum VisitMode {
  IN_PERSON
  ONLINE
}

enum FacilityType {
  CLINIC
  HOSPITAL
  PHARMACY
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      Role
  passwordHash String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  doctor    Doctor?
  patient   Patient?
  accounts  Account[]
  sessions  Session[]
}

model Facility {
  id        String       @id @default(cuid())
  name      String
  type      FacilityType
  address   String?
  latitude  Float?
  longitude Float?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  doctors       Doctor[]
  appointments  Appointment[]
  availability  AvailabilitySlot[]
  examOrders    ExamOrder[]

  // Verification
  registrationNumber String?
  verificationStatus VerificationStatus @default(PENDING)
}

model Doctor {
  id           String      @id @default(cuid())
  userId       String      @unique
  facilityId   String?
  specialization String?
  calendarUrl  String?

  user       User         @relation(fields: [userId], references: [id])
  facility   Facility?    @relation(fields: [facilityId], references: [id])
  slots      AvailabilitySlot[]
  appointments Appointment[]
  prescriptions Prescription[]
  examOrders    ExamOrder[]

  // Licensing & verification
  licenseNumber    String?
  licenseAuthority String?
  licenseCountry   String?
  licenseExpiresAt DateTime?
  verificationStatus VerificationStatus @default(PENDING)
}

model Patient {
  id          String       @id @default(cuid())
  userId      String       @unique
  dateOfBirth DateTime?
  gender      String?

  user         User         @relation(fields: [userId], references: [id])
  appointments Appointment[]
  prescriptions Prescription[]
  examOrders    ExamOrder[]
}

model AvailabilitySlot {
  id         String   @id @default(cuid())
  doctorId   String
  facilityId String?
  startsAt   DateTime
  endsAt     DateTime
  capacity   Int      @default(1)

  doctor   Doctor    @relation(fields: [doctorId], references: [id])
  facility Facility? @relation(fields: [facilityId], references: [id])

  @@index([doctorId, startsAt])
  @@index([facilityId])
}

model Appointment {
  id          String            @id @default(cuid())
  patientId   String
  doctorId    String
  facilityId  String?
  startsAt    DateTime
  endsAt      DateTime?
  status      AppointmentStatus @default(PENDING)
  mode        VisitMode         @default(IN_PERSON)
  meetingUrl  String?
  isFollowUp  Boolean           @default(false)
  // Encrypted notes
  notesEncrypted Bytes?
  createdAt   DateTime          @default(now())

  patient   Patient  @relation(fields: [patientId], references: [id])
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
  facility  Facility? @relation(fields: [facilityId], references: [id])
  prescription Prescription?

  @@index([patientId, startsAt])
  @@index([doctorId, startsAt])
}

model Prescription {
  id            String      @id @default(cuid())
  appointmentId String      @unique
  doctorId      String
  patientId     String
  // Store encrypted content only
  encryptedContent Bytes
  fileUrl       String?
  createdAt     DateTime    @default(now())

  appointment Appointment @relation(fields: [appointmentId], references: [id])
  doctor      Doctor      @relation(fields: [doctorId], references: [id])
  patient     Patient     @relation(fields: [patientId], references: [id])

  @@index([patientId])
  @@index([doctorId])
}

enum ExamOrderStatus {
  REQUESTED
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum ExamModePolicy {
  IN_PERSON_ONLY
  ANY
}

model ExamType {
  id     String          @id @default(cuid())
  name   String          @unique
  policy ExamModePolicy  @default(IN_PERSON_ONLY)

  examOrders ExamOrder[]
}

model ExamOrder {
  id          String          @id @default(cuid())
  patientId   String
  doctorId    String
  facilityId  String?
  examTypeId  String?
  description String
  status      ExamOrderStatus @default(REQUESTED)
  scheduledAt DateTime?
  resultUrl   String?
  encryptedResult Bytes?
  mode        VisitMode?
  createdAt   DateTime        @default(now())

  patient   Patient  @relation(fields: [patientId], references: [id])
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
  facility  Facility? @relation(fields: [facilityId], references: [id])
  examType  ExamType? @relation(fields: [examTypeId], references: [id])

  @@index([patientId])
  @@index([doctorId])
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
